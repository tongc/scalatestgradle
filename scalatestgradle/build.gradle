apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'scala'

sourceCompatibility = 1.5
version = '1.0'
jar {
    manifest {
        attributes 'Implementation-Title': 'Gradle Quickstart', 'Implementation-Version': version
    }
}

repositories {
    mavenCentral()
}

dependencies {
    compile group: 'commons-collections', name: 'commons-collections', version: '3.2'
    testCompile group: 'junit', name: 'junit', version: '4.+'
}

test {
    systemProperties 'property': 'value'
}

uploadArchives {
    repositories {
       flatDir {
           dirs 'repos'
       }
    }
}
	    
    sourceSets {
        main {
            scala { srcDir 'scalasrc' }
        }
        test {
	        scala { srcDir 'scalatest' }
    	}
    }
    
    dependencies {
    	scalaTools 'org.scala-lang:scala-compiler:2.10.0'
    	scalaTools 'org.scala-lang:scala-library:2.10.0'
        compile 'org.scala-lang:scala-library:2.10.0'
        testCompile 'org.scala-lang:scala-library:2.10.0'
        testCompile 'org.scalatest:scalatest_2.10:1.9.1'
    }
    
    compileScala {
    	scalaCompileOptions.useCompileDaemon = false
    	//optionally specify host and port of the daemon:
    	//scalaCompileOptions.daemonServer = "localhost:4243"
	}
	
	task scalatest(
		overwrite: true, 
		dependsOn: testClasses, 
		group: 'Verification',
		description: 'Runs scalatest test cases for all projects') << {		
	    ant.taskdef(name: 'scalatest',
	        classname: 'org.scalatest.tools.ScalaTestAntTask',
	        classpath: sourceSets.test.runtimeClasspath.asPath
	    )
	    
	    ant.scalatest(
	    	runpath: sourceSets.test.output.classesDir,
	    	parallel: 'true',
	    	numthreads: '10',
	        haltonfailure: 'true',
	        fork: 'false') {
	        	reporter(type: 'stdout')
	        	reporter(type: 'junitxml', directory: 'test-output/scalatest')
	    }
	}
